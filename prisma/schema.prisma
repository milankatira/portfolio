datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?
  imageUrl         String?
  externalId       String             @unique
  feedbacks        Feedback[]
  discordWebhooks  DiscordWebhook[]
  slackAccounts    Slack[]
  connections      Connections[]
  Workflows        Workflow[]
  subscription     Subscription?
  AuthorizedOrigin AuthorizedOrigin[]
  Section          Section[]
}

model DiscordWebhook {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  webhookId   String        @unique
  url         String        @unique
  name        String
  guildName   String
  guildId     String
  channelId   String        @unique
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  connections Connections[]
}

model Slack {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  appId            String
  authedUserId     String
  authedUserToken  String        @unique
  slackAccessToken String        @unique
  botUserId        String
  teamId           String
  teamName         String
  userId           String        @db.ObjectId
  user             User          @relation(fields: [userId], references: [id])
  connections      Connections[]
}

model Connections {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  type             String
  email            String? // Add this field
  discordWebhookId String? @db.ObjectId
  slackId          String? @db.ObjectId
  userId           String? @db.ObjectId

  DiscordWebhook DiscordWebhook? @relation(fields: [discordWebhookId], references: [id])
  Slack          Slack?          @relation(fields: [slackId], references: [id])
  User           User?           @relation(fields: [userId], references: [id])
}

model Theme {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  primaryColor   String
  secondaryColor String
  borderRadius   String
  feedback       Feedback?

  updatedAt DateTime @updatedAt
}

model Section {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  enabled     Boolean  @default(true)
  feedbackId  String   @db.ObjectId
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  type       SectionType @default(GENERAL_FEEDBACK)
  formFields FormField[]
  feedback   Feedback    @relation(fields: [feedbackId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  Response   Response[]
}

model FormField {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  label       String
  type        FieldType
  placeholder String?
  required    Boolean   @default(false)
  sectionId   String    @db.ObjectId
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  url         String?

  section   Section     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  Response  Response[]
  GuestUser GuestUser[]
}

model Feedback {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  userId      String   @db.ObjectId
  themeId     String?  @unique @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User         @relation(fields: [userId], references: [id])
  theme      Theme?       @relation(fields: [themeId], references: [id])
  sections   Section[]
  Submission Submission[]
  Workflow   Workflow[]
}

enum FieldType {
  TEXT
  EMAIL
  TEXTAREA
  RATING
  IMAGE
  URL
}

enum SectionType {
  GENERAL_FEEDBACK
  REPORT_BUG
  FEATURE_REQUEST
  CONTACT_US
}

model Submission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  feedbackId  String   @db.ObjectId
  guestUserId String?  @db.ObjectId
  ipAddress   String
  city        String?
  region      String?
  country     String?
  location    String?
  org         String?
  postalCode  String?
  timezone    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feedback  Feedback   @relation(fields: [feedbackId], references: [id])
  guestUser GuestUser? @relation(fields: [guestUserId], references: [entityId])
  responses Response[]
}

model GuestUser {
  entityId    String    @id @default(auto()) @map("_id") @db.ObjectId
  formFieldId String    @db.ObjectId
  formField   FormField @relation(fields: [formFieldId], references: [id])

  submissions Submission[]

  @@unique([entityId, formFieldId])
}

model Response {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  submissionId String   @db.ObjectId
  sectionId    String   @db.ObjectId
  formFieldId  String   @db.ObjectId
  answer       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  section    Section    @relation(fields: [sectionId], references: [id])
  formField  FormField  @relation(fields: [formFieldId], references: [id])
}

model Workflow {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  alertType      String
  campaignId     String // Reference to the selected campaign
  destination    String
  selectedFields String[] // Array of field IDs
  customMessage  String
  conditions     Json? // Store conditions as a JSON array
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  publish        Boolean  @default(false)
  feedbackId     String   @db.ObjectId
  feedback       Feedback @relation(fields: [feedbackId], references: [id])
}

model AuthorizedOrigin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  origin    String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

model Plan {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          PlanType
  price         Float
  interval      String // monthly, yearly
  features      String[]
  stripePriceId String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @unique @db.ObjectId
  planId               String   @db.ObjectId
  stripeCustomerId     String
  stripeSubscriptionId String   @unique
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  isActive             Boolean  @default(true)
  credits              Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
  plan                 Plan     @relation(fields: [planId], references: [id])
}

model StripeEvent {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  stripeEventId String    @unique
  type          String
  data          Json
  processedAt   DateTime?
  createdAt     DateTime  @default(now())
}
